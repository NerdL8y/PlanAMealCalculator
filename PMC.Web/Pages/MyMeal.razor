@page "/mymeal"
@using PMC.Web.Data
@using PMC.Data
@using PMC.DataModel
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavManager
@inject SelectedMealService SelectedMealService
@inject SelectedComponentService SelectedComponentService
@inject HomeURIService HomeURIService

<div align="right">
    <button style=" font-size:14px; background-color:white; border-width:0px; border-color:white" @onclick="@OpenModal">Help</button>
    <div align="left">
        <BlazorModal Title="Meal Details" IsOpened="isOpened">
            <ModalBody>
                <div>Your meal's components are listed below.  They are grouped by the </div>
                <div>Click on a meal name to view the details of the meal.</div>
                <div style="padding-left:10px">Once you have selected a meal, you will be able to select <b>My Meal Prep Timeline</b> to view the preparation timeline details.</div>
            </ModalBody>
            <ModalFooter>
            </ModalFooter>
        </BlazorModal>
    </div>
</div>


<h3>
    <input id="strNewMealName" style="border-width: 0; background-color: rgb(233, 238, 252); width:500px" type="text"
           @bind="@currentMealName"
           @onblur="@changeMade" />
</h3>

@if (SelectedMealService.MealID == 0)
{
    <p><em>A meal has not been selected.  Select My Meal List in the Navigation area, you must select a Meal from there first.  </em></p>
}
@if (SelectedMealService.MealID > 0)
{
    <table style="font-size:16px">
        <tr>
            <th width="10%">Meal Date</th>
            <th width="10%">Serve Time</th>
            <th width="5%">Guests</th>
            <th width="10%">Type</th>
            <th width="10%">Num Preparers</th>
            <th width="40%">Start Time</th>
        </tr>
        <tr>
            <td width="10%">
                <input id="dateNewMealDate" style="border-width: 0; background-color: rgb(233, 238, 252);" type="date"
                       @bind="@currentMealDate"
                       @onblur="@changeMade" />
            </td>
            <td width="10%">@mymeal.ServeTime.ToShortTimeString()</td>
            <td width="5%">
                <input name="numNumberGuests" type="number" style="width:35px; border-width: 0; background-color: rgb(233, 238, 252);" min="1" max="20000"
                       @bind="@currentNumGuests"
                       @onblur="@changeMade" />
            </td>
            <td width="10%">@mymeal.MealTypeDesc</td>
            <td width="10%">
                <input name="numNumberPreparers" type="number" style="width:35px; border-width: 0; background-color: rgb(233, 238, 252);" min="1" max="20000"
                       @bind="@currentNumPreparers"
                       @onblur="@changeMade" />
            </td>
            <td width="40%">@mymeal.MealStartPrepNLT.ToString("MMM dd @ hh:mm")</td>
        </tr>
    </table>
    <div>
        @if (changesMade == true)
        {
            <input type="button" value="Save Changes" @onclick="@saveMealChanges" />
        }
    </div>
    <hr />
    @if (mealComponentCount == 0)
    {
        <div>Components have not yet been selected for @currentMealName.</div>
        <hr />
    }


    @if (mealComponentCount > 0)
    {

        @foreach (var clist in componentTypes)
        {
            <div style="font-size:18px"><b>@clist.CompTypeDesc</b></div>
            @foreach (var list in currentMealComponents)
            {
                
                if (clist.CompTypeID == list.CompTypeID)
                {
                    <div style="padding-left:20px; font-size:16px">@list.CompName @list.CompServeDateTime.ToString(" @ hh:mm")</div>

                    @foreach (var rList in recipes)
                    {
                        var pia = "";
                        if (rList.PrepInAdvanceHours > 0)
                        {
                            pia = "(" + rList.PrepInAdvanceHours + " prep in advance)";
                        }
                        if (rList.CompID == list._mcCompID)
                        {
                            <div style="padding-left:40px; font-size:14px"><em>@rList.RcpName</em> @pia </div>
                        }
                    }
                }
            }
        }
    }
    <hr />

    <table width="1200px">
    </table>
    <!--This is the area where components can be added-->
    <div style="padding-bottom:0px">To add a component, make a selection from the Component list below and enter the desired serving time.</div>
    <table>
        <tr>
            <td>
                <select @bind="@SelectedComponentService.ComponentID" aria-hidden="true">
                    @foreach (var ctlist in componentTypes)
                    {
                        <optgroup label="@ctlist.CompTypeDesc" style="background-color: rgb(255, 249, 132);">
                            @foreach (var list in components)
                            {
                                if (list._cCompType == ctlist.CompTypeID)
                                {
                                    <option class="link" style="width:100%; height:10px; padding-bottom:1px; padding-top:1px; background-color:white"
                                            value="@list.CompID" onmouseover="this.style.color='#5440CC'" onmouseout="this.style.color='#000000'">
                                        @list.CompName 
                                    </option>
                                }
                            }
                        </optgroup>
                    }
                </select>
            </td>
            <td>
                Serving Time:
                <input type="time" @bind-value="@tempTime" />
            </td>
            @if (SelectedComponentService.ComponentID != 0)
            {
                <td><input id="btnAddComponent" @onclick="@AddComponentToMeal" type="button" value="Add Component" style="font-size:10px" /></td>
            }

        </tr>
    </table>

}




@code {

    [Inject]
    private RepoFactory repoFactory { get; set; }
    private int userID;
    //private int mealID;
    //private int currCompID = 0;
    private int currentNumGuests;
    private int currentNumPreparers;
    //private int newNumGuests;
    //private int newNumPreparers;
    private int mealComponentCount = 0;
    private int componentCount = 0;

    private Meal mymeal = new Meal();

    private List<Component> components = new List<Component>();
    private List<ComponentType> componentTypes = new List<ComponentType>();
    private List<MealComponent> currentMealComponents = new List<MealComponent>();
    private List<Recipe> recipes = new List<Recipe>();

    public string MealName { get; set; }
    public string MealTypeDesc { get; set; }

    private string currentMealName = "";
    //private string newMealName = "";

    private DateTime dateCompiled;
    private DateTime tempTime = new DateTime(01, 01, 01, 13, 00, 00);
    //private DateTime mealServeTime;
    //private DateTime startMealPrepNLT;
    private DateTime currentMealDate;
    //private DateTime newMealDate;

    private bool changesMade = false;


    //PMC1092-31
#pragma warning disable 1998
    protected override async Task OnInitializedAsync()
    {
        userID = repoFactory.UserID;
        SelectedComponentService.ComponentID = 0;

        if (SelectedMealService.MealID != 0)
        {
            var repo = repoFactory.Get<PMC.Data.MealRepo>();
            mymeal = repo.GetMealByMealID(SelectedMealService.MealID);
            currentMealName = mymeal.MealName;
            currentMealDate = new DateTime(mymeal.MealDate.Year, mymeal.MealDate.Month, mymeal.MealDate.Day, mymeal.ServeTime.Hour, mymeal.ServeTime.Minute, 0);
            currentNumGuests = mymeal.MealGuests;
            currentNumPreparers = mymeal.NumPreparers;

            var repoCR = repoFactory.Get<PMC.Data.MealComponentRepo>();
            var currMealComps = repoCR.GetMealComponentsByMealID(mymeal.MealID).ToList();
            currentMealComponents = currMealComps;
            mealComponentCount = currMealComps.Count();

            var compRepo = repoFactory.Get<PMC.Data.ComponentRepo>();
            components = compRepo.GetComponentsByUserID(userID).ToList();
            componentCount = components.Count + 2;

            var ctRepo = repoFactory.Get<PMC.Data.ComponentTypeRepo>();
            componentTypes = ctRepo.GetComponentTypes().ToList();

            var repoRecipe = repoFactory.Get<PMC.Data.RecipeRepo>();
            recipes = repoRecipe.GetRecipesByMealID(SelectedMealService.MealID).ToList();

        }

    }
#pragma warning restore 1998

    private void changeMade()
    {
        changesMade = true;
    }

    //PMC1092-18
    private void saveMealChanges()
    {
        var repo = repoFactory.Get<PMC.Data.MealRepo>();
        repo.SetMealName(SelectedMealService.MealID, currentMealName);
        repo.SetMealDate(SelectedMealService.MealID, currentMealDate);
        repo.SetMealNumberOfGuests(SelectedMealService.MealID, currentNumGuests);
        repo.SetMealNumberOfPreparersByMealID(SelectedMealService.MealID, currentNumPreparers);
        changesMade = false;
        StateHasChanged();
        refreshPage();
    }

    protected void AddComponentToMeal()
    {

        SelectedComponentService.OnChange += StateHasChanged;
        dateCompiled = new DateTime(mymeal.MealDate.Year, mymeal.MealDate.Month, mymeal.MealDate.Day, tempTime.Hour, tempTime.Minute, 0);
        StateHasChanged();
        var repo = repoFactory.Get<PMC.Data.MealComponentRepo>();
        var repoList = repo.InsertMealComponentByMealIDCompID(SelectedMealService.MealID, SelectedComponentService.ComponentID, dateCompiled, userID);
        var mrepo = repoFactory.Get<PMC.Data.MealRepo>();
        mymeal = mrepo.GetMealByMealID(SelectedMealService.MealID);

        currentMealComponents = repo.GetMealComponentsByMealID(SelectedMealService.MealID).ToList();
        mealComponentCount = currentMealComponents.Count();

        RefreshComponentInfo();
        refreshPage();
        StateHasChanged();
    }

    protected void RefreshComponentInfo()
    {
        var crepo = repoFactory.Get<PMC.Data.MealComponentRepo>();
        SelectedComponentService.ComponentID = 0;
        tempTime = new DateTime(01, 01, 01, 13, 00, 00);
        StateHasChanged();
    }


    private void refreshPage()
    {
        var repo = repoFactory.Get<PMC.Data.MealRepo>();
        mymeal = repo.GetMealByMealID(SelectedMealService.MealID);
        NavManager.NavigateTo(HomeURIService.HomeUri + "empty");
        NavManager.NavigateTo(HomeURIService.HomeUri + "mymeal");
    }

    protected bool isOpened = false;
    void OpenModal()
    {
        isOpened = true;

    }
    void CloseModal()
    {
        isOpened = false;
    }

}
