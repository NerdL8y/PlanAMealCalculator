@page "/addmymeal"
@using PMC.Web.Data
@using PMC.Data
@using PMC.DataModel
@inject SelectedMealService SelectedMealService
@inject SelectedComponentService SelectedComponentService
@inject NavigationManager NavManager
@inject HomeURIService HomeURIService

<!--Help modal-->
<div align="right">
    <button style=" font-size:14px; background-color:white; border-width:0px; border-color:white" @onclick="@OpenModal">Help</button>
    <div align="left">
        <BlazorModal Title="Add a Meal" IsOpened="isOpened">
            <ModalBody>
                <div>Select a Meal type.</div>
                <div>Enter a Meal Name</div>
                <div>Select a Meal Date</div>
                <div>Enter the number of Guests</div>
                <div>Enter the number of Preparers</div>
                <div>Click the Add Meal button</div>
            </ModalBody>
            <ModalFooter>
            </ModalFooter>
        </BlazorModal>
    </div>
</div>

<!--User must be valid before a meal can be inserted-->
@if (userID == 0)
{
    <em>You must login before adding a meal.</em>
}
@if (userID > 0 && SelectedMealService.MealID == 0)
{
    <h3>Add a Meal</h3>
    {
        <table>
            <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Date</th>
                <th># Guests</th>
                <th># Preparers</th>
            </tr>
            <tr>
                <td style="vertical-align:text-top">
                    @foreach (var choice in mealtype)
                    {
                        <label>
                            <input name="choiceMealType" type="radio"
                                   value="@choice"
                                   @onchange="@(() => { currentChoice = choice; })">
                            @choice.MealTypeDesc
                        </label>
                        <br />
                    }
                </td>
                <td style="vertical-align:text-top"><input id="txtMealTitle" @bind="@MealName" type="text" spellcheck="true" style="width:400px" maxlength="99" /> <br /></td>
                <td style="vertical-align:text-top"><input id="numMealDate" @bind="@MealDate" type="date" /><br /></td>
                <td style="vertical-align:text-top"><input id="numMealGuests" @bind="@MealGuests" type="number" style="width:40px"><br /></td>
                <td style="vertical-align:text-top"><input id="numPreparers" @bind="@NumPreparers" type="number" style="width:40px"><br /></td>
            </tr>

            @if (MealName.Length > 0)
            {
                <tr>
                    <td></td>
                    <td><input id="btnAddMeal" @onclick="AddMeal" type="button" value="Add Meal" /></td>
                </tr>
            }
        </table>
    }
}

@if (validMealName == false)
{
    <p>@errorMsg</p>
}


@if (SelectedMealService.MealID > 0)
{
    <table width="1200px">
        <tr>
            <td><h4>@MealName (@MealTypeDesc)</h4></td>
        </tr>
    </table>
    <!--This is the area where components can be added-->
    <p>Select a component and enter the desired serving time.</p>
    <table>
        <tr>
            <td>
                <select @bind="@SelectedComponentService.ComponentID" aria-hidden="true">
                    @foreach (var ctlist in componentTypes)
                    {
                        <optgroup label="@ctlist.CompTypeDesc">
                            @foreach (var list in components)
                            {
                                if (list._cCompType == ctlist.CompTypeID)
                                {
                                    <option class="link" style="width:100%; height:10px; padding-bottom:1px; padding-top:1px" value="@list.CompID" onmouseover="this.style.color='#5440CC'" onmouseout="this.style.color='#000000'">@list.CompName</option>
                                }
                            }
                        </optgroup>
                    }
                </select>
            </td>
            <td>
                Serving Time:
                <input type="time" @bind-value="@tempTime" />
            </td>
            @if (SelectedComponentService.ComponentID != 0)
            {
                <td><input id="btnAddComponent" @onclick="@AddComponentToMeal" type="button" value="Add Component" style="font-size:10px" /></td>
            }

        </tr>
    </table>

}

<!--Displays components as they are added to meals.-->
@if (SelectedMealService.MealID > 0 && mealComponentCount > 0)
{
    <table>
        <tr>
            <th width="10%">Type</th>
            <th width="10%">Serve Time</th>
            <th width="80%">Name</th>
        </tr>

        @foreach (var list in currentMealComponents)
        {
            <tr>
                <td style="font-size:12px; padding-left:5px">@list.CompTypeDesc</td>
                <td style="font-size:12px; padding-left:5px">@list.CompServeDateTime.ToShortTimeString()</td>
                <td style="font-size:12px; padding-left:5px">@list.CompName</td>
            </tr>
        }

    </table>
}

@code {

    [Inject]
    private RepoFactory repoFactory { get; set; }
    private int userID;

    private Meal meal = new Meal();
    private List<MealComponent> mealComponents = new List<MealComponent>();
    public string MealName { get; set; }
    public DateTime MealDate { get; set; }
    public int MealGuests { get; set; }
    public int _mealType { get; set; }
    public string MealTypeDesc { get; set; }
    public int NumPreparers { get; set; }
    public List<MealType> mealtype = new List<MealType>();
    private MealType currentChoice;
    private bool validMealName = false;
    private string errorMsg = "";
    private List<ComponentType> componentTypes = new List<ComponentType>();
    private List<Component> components = new List<Component>();
    private int componentCount = 0;
    private List<MealComponent> currentMealComponents = new List<MealComponent>();
    private int mealComponentCount = 0;
    private TimeSpan LocalTime = TimeSpan.FromHours(0);
    private DateTime tempTime = new DateTime(01, 01, 01, 13, 00, 00);


    private DateTime dateCompiled;
    //private DateTime servetime;

#pragma warning disable 1998
    protected override async Task OnInitializedAsync()
    {
        userID = repoFactory.UserID;
        SelectedMealService.MealID = 0;
        var mealtypeRepo = repoFactory.Get<PMC.Data.MealTypeRepo>();
        var mtList = mealtypeRepo.GetMealTypes().ToList();
        mealtype = mtList;

        var compRepo = repoFactory.Get<PMC.Data.ComponentRepo>();
        components = compRepo.GetComponentsByUserID(userID).ToList();
        componentCount = components.Count + 5;

        var ctRepo = repoFactory.Get<PMC.Data.ComponentTypeRepo>();
        componentTypes = ctRepo.GetComponentTypes().ToList();

        //Defaults mealdate to today instead of 01/01/01
        MealDate = DateTime.Today;

        //Number of preparers always defaults to 1 as minimum
        NumPreparers = 1;

        //initialize mealname so it is not void when testing mealname.length
        MealName = "";


        if (userID > 0)
        {
            //Design states the number of guests will default to the User's number of family members
            var userRepo = repoFactory.Get<PMC.Data.UserRepo>();
            var currentRepo = userRepo.GetUserByUserID(userID);
            MealGuests = currentRepo.UserNumFamMembers;
        }
    }
#pragma warning restore 1998

    //PMC1092-09 PMC1092-13 PMC1092-32
    public void AddMeal()
    {
        validMealName = false;
        var repo = repoFactory.Get<PMC.Data.MealRepo>();

        CheckMealName();

        if (validMealName == true)
        {
            var currentMeal = repo.InsertMealByUserID(MealName, MealDate, MealGuests, currentChoice.MealTypeID, NumPreparers, userID);
            meal = currentMeal;
            SelectedMealService.MealID = currentMeal.MealID;
            meal = repo.GetMealByMealID(SelectedMealService.MealID); ;
            MealTypeDesc = meal.MealTypeDesc;
            SelectedMealService.OnChange += StateHasChanged;
        }
        if (validMealName == false)
        {
            errorMsg = "A meal with the name '" + MealName + "' already exists. Please use a different name.";
        }
        StateHasChanged();
    }

    //verifies the meal name does not already exists for the user in the database.
    public void CheckMealName()
    {
        var repo = repoFactory.Get<PMC.Data.MealRepo>();
        var mealinfo = repo.CheckMealNameByUserID(MealName, userID);
        if (mealinfo.MealNameCount == 0)
        {
            validMealName = true;
        }
        if (mealinfo.MealNameCount != 0)
        {
            validMealName = false;
        }
        StateHasChanged();
    }



    protected void AddComponentToMeal()
    {

        SelectedComponentService.OnChange += StateHasChanged;
        dateCompiled = new DateTime(meal.MealDate.Year, meal.MealDate.Month, meal.MealDate.Day, tempTime.Hour, tempTime.Minute, 0);
        StateHasChanged();
        var repo = repoFactory.Get<PMC.Data.MealComponentRepo>();
        var repoList = repo.InsertMealComponentByMealIDCompID(SelectedMealService.MealID, SelectedComponentService.ComponentID, dateCompiled, userID);
        var mrepo = repoFactory.Get<PMC.Data.MealRepo>();
        meal = mrepo.GetMealByMealID(SelectedMealService.MealID);

        currentMealComponents = repo.GetMealComponentsByMealID(SelectedMealService.MealID).ToList();
        mealComponentCount = currentMealComponents.Count();

        NavManager.NavigateTo(HomeURIService.HomeUri + "mymeal");
    }

    protected bool isOpened = false;
    void OpenModal()
    {
        isOpened = true;

    }
    void CloseModal()
    {
        isOpened = false;
    }

}
