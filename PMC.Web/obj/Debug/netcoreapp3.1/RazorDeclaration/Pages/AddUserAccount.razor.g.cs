// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PMC.Web.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using PMC.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Debora\source\repos\PMC\PMC.Web\_Imports.razor"
using PMC.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Debora\source\repos\PMC\PMC.Web\Pages\AddUserAccount.razor"
using PMC.Web.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Debora\source\repos\PMC\PMC.Web\Pages\AddUserAccount.razor"
using PMC.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Debora\source\repos\PMC\PMC.Web\Pages\AddUserAccount.razor"
using PMC.DataModel;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/adduseraccount")]
    public partial class AddUserAccount : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 104 "C:\Users\Debora\source\repos\PMC\PMC.Web\Pages\AddUserAccount.razor"
       

    [Inject]
    private RepoFactory repoFactory { get; set; }

    protected string userName;
    protected string userPassword = "";
    protected string userPasswordCompare = "";
    protected string userFirstName;
    protected string userLastName;
    protected string userState = "";
    //set default value to 1
    protected int userNumFamMembers = 1;
    protected string userEmail;
    //all new accounts are User role which is 3 PMC1023-02 provides guest permissions 
    //PMC1023-03 there are zero methods for adding a user with admin permissions, admins have to be added manually to DB.
    protected int userRole = 3;
    protected string authMessage;
    protected string checkUserName;
    protected bool validNewUserName = false;
    protected bool validNewEmail = false;
    protected string invalidLogin = "";

    protected int unresponse;
    protected bool attemptedToAddAccount = false;
    protected bool attemptedToCheckAvailability = false;
    protected string msgDuplicateEmail = "";
    protected string msgDuplicateUser = "";
    protected string what = "InitialValue";
    static readonly HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        repoFactory.Get<PMC.Data.UserRepo>();
    }

    protected async void CheckPassword()
    {
        attemptedToAddAccount = true;
        if (userPassword == userPasswordCompare)
        {
            CreateUserAccount();
            AppState.LoggedIn = true;
            NavManager.NavigateTo(HomeURIService.HomeUri + "plannedmeals");
        }

        StateHasChanged();
    }

    //PMC1092-25 PMC1092-38 PMC1093-06 
    protected async void CreateUserAccount()
    {
        var repo = repoFactory.Get<PMC.Data.UserRepo>();
        byte[] password = System.Text.ASCIIEncoding.ASCII.GetBytes(userPassword);

        try
        {
            repo.InsertUserAccount(userName, userFirstName, userLastName, userState, userNumFamMembers, userEmail, password, userRole);
            Authenticate();
        }
        catch
        {
            authMessage = "The user profile could not be created";
        }
        StateHasChanged();

    }

    public async void CheckThisUserName()
    {
        var repo = repoFactory.Get<PMC.Data.UserRepo>();
        var checkResponse = repo.CheckUserName(userName);

        CheckEmailAddress(userEmail);
        if (validNewEmail == true)
        {
            attemptedToCheckAvailability = true;
            //if the username does NOT exist, then checkResponse will be null
            //therefore the username is good to use
            if (checkResponse.UserCount == 0)
            {
                validNewUserName = true;
            }
            //if the username does exist, then checkResponse will be 1
            //therefore the username is NOT good to use,
            if (checkResponse.UserCount != 0)
            {
                validNewUserName = false;
                msgDuplicateUser = "The username " + userName + " is not available. Please try a different username.";
            }
        }
        StateHasChanged();

    }
    public async void CheckEmailAddress(string userEmail)
    {


        var repo = repoFactory.Get<PMC.Data.UserRepo>();
        var checkResponse = repo.CheckEmailAddress(userEmail);

        //if the email address is NOT found in the DB, then checkResponse == null and the email is good to use
        if (checkResponse.EmailCount == 0)
        {
            attemptedToCheckAvailability = true;
            validNewEmail = true;
        }
        //if the email address is found in the DB, then checkResponse == 1 and the email is NOT good to use
        if (checkResponse.EmailCount != 0)
        {
            attemptedToCheckAvailability = true;
            validNewEmail = false;
            msgDuplicateEmail = "An account with this email already exists. Please log into your existing account or contact PMC at PMC@PMC.COM to have your password reset.";
        }
        StateHasChanged();
    }

    //using Login as the method name causes it to be the same as the class name and that is not acceptable
    public async void Authenticate()
    {
        AppState.LoggedIn = false;
        client.BaseAddress = new Uri(HomeURIService.HomeUri);
        var repo = repoFactory.Get<PMC.Data.SessionInfoRepo>();
        var results = repo.Authenticate(userName, userPassword);

        if (results != null)
        {

            repoFactory.SessionId = results.SsID;
            repoFactory.UserID = results.UserID;
            HttpResponseMessage response = await client.GetAsync(HomeURIService.HomeUri);
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();
            AppState.LoggedIn = true;

            NavManager.NavigateTo(HomeURIService.HomeUri + "help");

        }

        if (repoFactory.UserID == 0)
        {
            AppState.LoggedIn = false;
            invalidLogin = "Invalid Username or Password, please try again.";
        }



    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState AppState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HomeURIService HomeURIService { get; set; }
    }
}
#pragma warning restore 1591
